import React, { useState } from "react";
import { Trans } from "react-i18next";

import { Mail, Loader2 } from "lucide-react"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import Head from "next/head";
import Link from "next/link";
import { CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from "@/components/ui/card";
import Google from '../../public/icons/google.svg';
import Image from "next/image";
import { Form, FormControl, FormField, FormItem, FormMessage } from "@/components/ui/form";
import { zodResolver } from "@hookform/resolvers/zod"
import { useForm } from "react-hook-form"
import { z } from "zod"

const formSchema = z.object({
  email: z.string().email({
    message: "Formato de e-mail inválido.",
  }),
  password: z.string().regex(/^(?=.*\d)(?=.*[a-z])(?=.*[A-Z])(?=.*[$*&@#])[0-9a-zA-Z$*&@#]{8,}$/,{
    message: "A senha deve possuir pelo menos 1 letra minúscula, 1 letra maiúscula, 1 caractere especial ($*&@#) e 8 caracteres totais.",
  }),
});

export default function Signup() {

  const [loading, setLoading] = useState(false);
  const [passwordFieldVisible, setPasswordFieldVisible] = useState(false);

  const form = useForm<z.infer<typeof formSchema>>({
    resolver: zodResolver(formSchema),
    defaultValues: {
      email: "",
      password: ""
    },
  });

  function onSubmit(values: z.infer<typeof formSchema>) {
    console.log(values);
  }

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className='flex flex-row justify-center items-stretch min-h-screen'>
        <div className='flex-1 bg-zinc-900 hidden lg:flex flex-col justify-start items-start p-4 md-p6 lg:p-12'>
          <p className='text-primary-foreground font-semibold text-xl'>Contratual Inc</p>
        </div>

        <div className='flex-1 flex flex-col justify-start items-center p-4 md-p6 lg:p-12'>
          <nav className='self-end'>
            <Link href='/login' className='font-medium'>
              <Button variant="ghost">
              Login
              </Button>
            </Link>
          </nav>
          <section className='flex-1 w-full relative max-w-96'>
            <article className='absolute m-auto inset-0 h-fit flex flex-col justify-center items-center gap-2'>
              <CardHeader className='w-full'>
                <CardTitle className='text-center'>
                  Crie uma conta
                </CardTitle>
                <CardDescription className='text-center'>
                  Insira seu e-mail abaixo para criar sua conta
                </CardDescription>
              </CardHeader>

              <CardContent className='w-full'>
                <Form {...form}>
                  <form onSubmit={form.handleSubmit(onSubmit)}>
                    <FormField
                      control={form.control}
                      name="email"
                      render={({ field }) => (
                        <FormItem>
                          <FormControl>
                            <Input type='email' placeholder='E-mail' className='w-full mb-2 shadow-sm' {...field} onFocus={()=>setPasswordFieldVisible(true)}/>
                          </FormControl>
                          <FormMessage className='font-normal !mb-2'/>
                        </FormItem>
                      )}
                    />
                    {passwordFieldVisible &&
                      <FormField
                        control={form.control}
                        name="password"
                        render={({ field }) => (
                          <FormItem>
                            <FormControl>
                              <Input type='password' placeholder='Senha' className='w-full mb-2 shadow-sm' {...field}/>
                            </FormControl>
                            <FormMessage className='font-normal !mb-2'/>
                          </FormItem>
                        )}
                      />
                    }
                    <Button className='w-full shadow' disabled={loading}>
                      {loading? <Loader2 className='mr-2 h-4 w-4 animate-spin' /> : <Mail className='mr-2 h-4 w-4' />}
                      {loading ? "Por favor, aguarde" : "Cadastre-se com e-mail"}
                    </Button>
                  </form>
                </Form>
              </CardContent>

              <div className='relative w-full'>
                <div className='absolute inset-0 flex items-center'>
                  <span className='w-full border-t'/>
                </div>
                <div className='relative flex justify-center text-xs uppercase'>
                  <span className='bg-background px-2 text-muted-foreground'>
                    Ou continue com
                  </span>
                </div>
              </div>

              <Button variant="outline" className='w-full gap-2 shadow-sm'>
                <Image
                  width={16}
                  height={16}
                  alt="google"
                  src={Google}
                />
                Google
              </Button>

              <CardFooter>
                <p className='text-base text-muted-foreground text-center'>
                  Clicando para continuar, você concorda com nossos
                  {" "}<Link href='/termos' className="underline underline-offset-4 hover:text-primary">Termos de Serviço</Link>
                  {" "}e
                  {" "}<Link href='/privacidade' className="underline underline-offset-4 hover:text-primary">Política de Privacidade</Link>.
                </p>
              </CardFooter>
            </article>
          </section>
        </div>
      </main>
    </>
  )
}
