import React, { useEffect } from "react";
import { Mail, Loader2 } from "lucide-react"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import Head from "next/head";
import Link from "next/link";
import { CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import Google from '../../public/icons/google.svg';
import Image from "next/image";
import { Form, FormControl, FormField, FormItem, FormMessage } from "@/components/ui/form";
import { zodResolver } from "@hookform/resolvers/zod";
import { useForm } from "react-hook-form";
import { useLogin } from "@/hooks/use-login";
import { LoginForm, loginFormSchema } from "@/domain/dto/LoginForm";
import { useToast } from "@/hooks/use-toast";
import { ToastAction } from "@/components/ui/toast";
import { useOnlyUnloggedRoute } from "@/hooks/use-unlogged-route";
import { useGoogleLogin } from "@/hooks/use-google-login";
import { useRouter } from "next/navigation";

export default function Login() {

  useOnlyUnloggedRoute();

  const { mutate, error, isError, isPending, isSuccess } = useLogin();

  const router = useRouter();

  const { toast } = useToast();

  const form = useForm<LoginForm>({
    resolver: zodResolver(loginFormSchema),
    defaultValues: {
      email: "",
      password: ""
    },
  });

  function onSubmit(values: LoginForm) {
    mutate(values);
  }

  useEffect(()=>{
    if(isError && error) {
      toast({
        variant: "destructive",
        title: "Erro!",
        description: error.message,
        action: <ToastAction altText="Try again">Try again</ToastAction>,
      });
    } else if(isSuccess) {
      toast({
        title: "Login feito com Sucesso!",
        description: "VocÃª vai ser redirecionado em breve.",
      });
    }
  }, [error, isError, isSuccess]);

  const goToGoogleAuthPage = () => {
    window.location.href = `${process.env.API_BASE_URL}/api/auth/google/login`
  }

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className='flex flex-row justify-center items-stretch min-h-screen'>
        <div className='flex-1 bg-zinc-900 hidden lg:flex flex-col justify-start items-start p-4 md-p6 lg:p-12'>
          <p className='text-primary-foreground font-semibold text-xl'>Contratual Inc</p>
        </div>

        <div className='flex-1 flex flex-col justify-start items-center p-4 md-p6 lg:p-12'>
          <nav className='self-end'>
            <Link href='/cadastro' className='font-medium'>
              <Button variant="ghost">
                Cadastrar-se
              </Button>
            </Link>
          </nav>
          <section className='flex-1 w-full relative max-w-96'>
            <article className='absolute m-auto inset-0 h-fit flex flex-col justify-center items-center gap-2'>
              <CardHeader className='w-full'>
                <CardTitle className='text-center'>
                  Entrar
                </CardTitle>
                <CardDescription className='text-center'>
                  Insira seu e-mail abaixo para entrar na sua conta
                </CardDescription>
              </CardHeader>

              <CardContent className='w-full'>
                <Form {...form}>
                  <form onSubmit={form.handleSubmit(onSubmit)}>
                    <FormField
                      control={form.control}
                      name="email"
                      render={({ field }) => (
                        <FormItem>
                          <FormControl>
                            <Input type='email' placeholder='E-mail' className='w-full mb-2 shadow-sm' {...field}/>
                          </FormControl>
                          <FormMessage className='font-normal !mb-2'/>
                        </FormItem>
                      )}
                    />
                    <FormField
                      control={form.control}
                      name="password"
                      render={({ field }) => (
                        <FormItem>
                          <FormControl>
                            <Input type='password' placeholder='Senha' className='w-full mb-2 shadow-sm' {...field}/>
                          </FormControl>
                          <FormMessage className='font-normal !mb-2'/>
                        </FormItem>
                      )}
                    />
                    <Button className='w-full shadow' disabled={isPending}>
                      {isPending ? <Loader2 className='mr-2 h-4 w-4 animate-spin' /> : <Mail className='mr-2 h-4 w-4' />}
                      {isPending ? "Por favor, aguarde" : "Entrar com e-mail"}
                    </Button>
                  </form>
                </Form>
              </CardContent>

              <div className='relative w-full'>
                <div className='absolute inset-0 flex items-center'>
                  <span className='w-full border-t'/>
                </div>
                <div className='relative flex justify-center text-xs uppercase'>
                  <span className='bg-background px-2 text-muted-foreground'>
                    Ou continue com
                  </span>
                </div>
              </div>

              <Button variant="outline" className='w-full gap-2 shadow-sm' onClick={goToGoogleAuthPage}>
                <Image
                  width={16}
                  height={16}
                  alt="google"
                  src={Google}
                />
                Google
              </Button>
            </article>
          </section>
        </div>
      </main>
    </>
  )
}
